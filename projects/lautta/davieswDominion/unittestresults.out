Test Results:
unittest1.c:
----------------- Testing Function: isGameOver() ----------------
TEST 1: game is over when province supply is empty
TEST 1 PASSED
TEST 2: game is over when 3 supply other than province are empty
TEST 2 PASSED
TEST 3: game is over when combination of 1 supply/treasure/kingdom are empty
TEST 3 PASSED
TEST 4: game is not over when 2 supply other than province are empty
TEST 4 PASSED
TEST 5: game is not over when 1 supply other than province are empty
TEST 5 PASSED
TEST 6: game is not over with full supplies
TEST 6 PASSED
TEST 7: treasure and kingdom supply count hasn't changed
TEST 7 PASSED
TEST 8: actions, buys, and coins unchanged
TEST 8 PASSED

 >>>>> Testing complete: isGameOver() <<<<<

File 'dominion.c'
Lines executed:17.35% of 559
Branches executed:17.27% of 417
Taken at least once:14.15% of 417
Calls executed:7.37% of 95
Creating 'dominion.c.gcov'

unittest2.c:
----------------- Testing Function: whoseTurn() ----------------
TEST 1: whoseTurn points to current player and next player when appropriate
TEST 1 PASSED
TEST 2: treasure and kingdom supply count hasn't changed
TEST 2 PASSED
TEST 3: actions, buys, and coins unchanged
TEST 3 PASSED

 >>>>> Testing complete: whoseTurn() <<<<<

File 'dominion.c'
Lines executed:17.71% of 559
Branches executed:17.27% of 417
Taken at least once:14.15% of 417
Calls executed:7.37% of 95
Creating 'dominion.c.gcov'

unittest3.c:
----------------- Testing Function: endTurn() ----------------
TEST 1: whoseTurn loops around when number of players exceeded
TEST 1 PASSED
TEST 2: if nothing is played state remains the same
TEST 2 PASSED
TEST 3: whoseTurn increments normally and state variables properly reset
TEST 3 PASSED
TEST 4: handCount and discard count properly update for both players
TEST 4 PASSED
TEST 5: coins are properly updated for the next player
TEST 5 PASSED
TEST 6: treasure and kingdom supply count hasn't changed
TEST 6 PASSED

 >>>>> Testing complete: endTurn() <<<<<

File 'dominion.c'
Lines executed:21.29% of 559
Branches executed:18.71% of 417
Taken at least once:15.59% of 417
Calls executed:10.53% of 95
Creating 'dominion.c.gcov'

unittest4.c:
----------------- Testing Function: gainCard() ----------------
TEST 1: gainCard returns -1 with supply card not in game
TEST 1 PASSED
TEST 2: all players deck, hand, and discard are unchanged
TEST 2 PASSED
TEST 3: treasure and kingdom supply count hasn't changed
TEST 3 PASSED
TEST 4: actions, buys, and coins unchanged
TEST 4 PASSED
TEST 5: gainCard returns -1 with empty supply card
TEST 5 PASSED
TEST 6: all players deck, hand, and discard are unchanged
TEST 6 PASSED
TEST 7: treasure and kingdom supply count hasn't changed
TEST 7 PASSED
TEST 8: actions, buys, and coins unchanged
TEST 8 PASSED
TEST 9: gainCard returns 0 with valid supply card
TEST 9 PASSED
TEST 10: other players deck, hand, and discard are unchanged
TEST 10 PASSED
TEST 11: council supply count down three for each flag test
TEST 11 PASSED
TEST 12: 1 council room added to current player's deck, discard, and hand
TEST 12 PASSED
TEST 13: other treasure and kingdom supply count hasn't changed
TEST 13 PASSED
TEST 14: actions, buys, and coins unchanged
TEST 14 PASSED

 >>>>> Testing complete: gainCard() <<<<<

File 'dominion.c'
Lines executed:23.97% of 559
Branches executed:20.14% of 417
Taken at least once:17.03% of 417
Calls executed:11.58% of 95
Creating 'dominion.c.gcov'

cardtest1.c:
----------------- Testing Card: smithy ----------------
TEST 1: current player gains 3 cards and smithy added to played pile
TEST 1 FAILED
-- played card count = 1, expected = 1
-- hand count = 8, expected = 7
-- card id = 13, expected = 13
TEST 2: other player's deck and hand is unchanged
TEST 2 PASSED
TEST 3: current player drawing from own pile
TEST 3 FAILED
-- deck count = 1, expected = 2
TEST 4: treasure and kingdom supply count hasn't changed
TEST 4 PASSED
TEST 5: actions, buys, and coins unchanged
TEST 6 PASSED

 >>>>> Testing complete: smithy <<<<<

File 'dominion.c'
Lines executed:28.44% of 559
Branches executed:27.58% of 417
Taken at least once:18.71% of 417
Calls executed:15.79% of 95
Creating 'dominion.c.gcov'

cardtest2.c:
----------------- Testing Card: adventurer ----------------
TEST 1: current player gains 2 cards and adventurer added to played pile
TEST 1 FAILED
-- played card count = 0, expected = 1
-- hand count = 8, expected = 7
-- card id = 0, expected = 7
TEST 2: other player's deck and hand is unchanged
TEST 2 PASSED
TEST 3: Revealed cards being discarded and coming from players cards
TEST 3 FAILED
-- discard count = 0, expected = 0
-- discard + deck count = 2, expected = 3
TEST 4: 2 newest cards in hand are treasures
TEST 4 PASSED
TEST 5: treasure and kingdom supply count hasn't changed
TEST 5 PASSED
TEST 6: actions and buys unchanged
TEST 6 PASSED
TEST 7: discard contains no treasure
TEST 7 PASSED

 >>>>> Testing complete: adventurer <<<<<

File 'dominion.c'
Lines executed:31.31% of 559
Branches executed:30.46% of 417
Taken at least once:21.58% of 417
Calls executed:17.89% of 95
Creating 'dominion.c.gcov'

cardtest3.c:
----------------- Testing Card: village ----------------
TEST 1: current player gains 1 cards and village added to played pile
TEST 1 PASSED
TEST 2: other player's deck and hand is unchanged
TEST 2 PASSED
TEST 3: current player gets 2 actions
TEST 3 PASSED
TEST 4: current player drawing from own pile
TEST 4 PASSED
TEST 5: treasure and kingdom supply count hasn't changed
TEST 5 PASSED
TEST 6: buys and coins unchanged
TEST 6 PASSED

 >>>>> Testing complete: village <<<<<

File 'dominion.c'
Lines executed:32.38% of 559
Branches executed:30.46% of 417
Taken at least once:21.82% of 417
Calls executed:21.05% of 95
Creating 'dominion.c.gcov'

cardtest4.c:
----------------- Testing Card: council_room ----------------
TEST 1: current player gains 4 cards and council room added to played pile
TEST 1 FAILED
-- played card count = 1, expected = 1
-- hand count = 9, expected = 8
-- card id = 8, expected = 8
TEST 2: other players gain card in hand and deck decreases
TEST 2 FAILED
-- hand count = 0, expected = 1
-- deck count = 10, expected = 9
TEST 3: current player drawing from own pile
TEST 3 FAILED
-- deck count = 0, expected = 1
TEST 4: number of buys increases by 1
TEST 4 PASSED
TEST 5: treasure and kingdom supply count hasn't changed
TEST 5 PASSED
TEST 6: actions and coins unchanged
TEST 6 PASSED

 >>>>> Testing complete: council_room <<<<<

File 'dominion.c'
Lines executed:34.17% of 559
Branches executed:31.89% of 417
Taken at least once:23.50% of 417
Calls executed:25.26% of 95
Creating 'dominion.c.gcov'

gcov Data:
Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:100.00% of 13
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'cardEffect'
Lines executed:5.97% of 201
Branches executed:13.29% of 173
Taken at least once:2.89% of 173
Calls executed:9.09% of 55

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:36.36% of 22
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
Calls executed:0.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:100.00% of 10
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'endTurn'
Lines executed:100.00% of 20
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:93.75% of 16
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:80.65% of 62
Branches executed:91.30% of 46
Taken at least once:73.91% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'villagePlayed'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 2

Function 'smithyPlayed'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'remodelPlayed'
Lines executed:0.00% of 11
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 5

Function 'councilPlayed'
Lines executed:100.00% of 9
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 3

Function 'adventurerPlayed'
Lines executed:93.75% of 16
Branches executed:100.00% of 12
Taken at least once:91.67% of 12
Calls executed:50.00% of 2

File 'dominion.c'
Lines executed:34.17% of 559
Branches executed:31.89% of 417
Taken at least once:23.50% of 417
Calls executed:25.26% of 95
Creating 'dominion.c.gcov'

dominion.c.gcov:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function adventurerPlayed called 2 returned 100% blocks executed 93%
        2:    8:int adventurerPlayed(struct gameState *gState, int handPosition, int curPlayer, int treasureDrawn)
        -:    9:{
        -:   10:    int cardDrawn;
        -:   11:    int temphand[MAX_HAND];
        2:   12:    int z = 0;
        -:   13:
       12:   14:    while(treasureDrawn <= 2) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        8:   15:        if (gState->deckCount[curPlayer] < 1) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   16:            shuffle(curPlayer, gState);        
call    0 never executed
        -:   17:        }
        8:   18:        drawCard(curPlayer, gState);
call    0 returned 100%
        8:   19:        cardDrawn = gState->hand[curPlayer][gState->handCount[curPlayer]-1];
        8:   20:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 75% (fallthrough)
branch  3 taken 25%
branch  4 taken 33% (fallthrough)
branch  5 taken 67%
        6:   21:            treasureDrawn++;
        -:   22:        else {
        2:   23:            temphand[z] = cardDrawn;
        2:   24:            gState->handCount[curPlayer]--;
        2:   25:            z++;
        -:   26:        }
        -:   27:    }
        6:   28:    while(z-1>=0){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        2:   29:        gState->discard[curPlayer][gState->discardCount[curPlayer]++]=temphand[z-1];
        2:   30:        z=z-1;
        -:   31:    }
        2:   32:    return 0;
        -:   33:}
        -:   34:
function councilPlayed called 1 returned 100% blocks executed 100%
        1:   35:int councilPlayed(struct gameState *state, int handPos, int currentPlayer)
        -:   36:{
        -:   37:    int i;
        5:   38:    for (i = 0; i < 4; i++) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        4:   39:        drawCard(currentPlayer, state);
call    0 returned 100%
        -:   40:    }
        -:   41:
        -:   42:    //+1 Buy
        1:   43:    state->numBuys++;
        -:   44:    
        -:   45:    //Each other player draws a card
        3:   46:    for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:   47:        {
        2:   48:          if ( i == currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   49:            {
        1:   50:              drawCard(i, state);
call    0 returned 100%
        -:   51:            }
        -:   52:        }
        -:   53:
        -:   54:    //put played card in played card pile
        1:   55:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:   56:
        1:   57:    return 0;
        -:   58:}
        -:   59:
function remodelPlayed called 0 returned 0% blocks executed 0%
    #####:   60:int remodelPlayed(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2) {
        -:   61:    int i;
    #####:   62:    int j = state->hand[currentPlayer][choice2];
        -:   63:
    #####:   64:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   65:        {
    #####:   66:          return -1;
        -:   67:        }
        -:   68:
    #####:   69:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:   70:
        -:   71:      //discard card from hand
    #####:   72:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:   73:
        -:   74:      //discard trashed card
    #####:   75:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:   76:        {
    #####:   77:          if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:   78:            {
    #####:   79:              discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:   80:              break;
        -:   81:            }
        -:   82:        }
        -:   83:
        -:   84:
    #####:   85:      return 0;
        -:   86:}
        -:   87:
function smithyPlayed called 1 returned 100% blocks executed 100%
        1:   88:int smithyPlayed(struct gameState *state, int currentPlayer, int handPos) {
        -:   89:    int i;
        5:   90:    for (i = 0; i <= 3; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:   91:    {
        4:   92:        drawCard(currentPlayer, state);
call    0 returned 100%
        -:   93:    }
        -:   94:
        -:   95:    //discard card from hand
        1:   96:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:   97:    return 0;
        -:   98:    
        -:   99:}
        -:  100:
function villagePlayed called 1 returned 100% blocks executed 100%
        1:  101:int villagePlayed(struct gameState *state, int currentPlayer, int handPos) {
        -:  102:    //+1 Card
        1:  103:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  104:
        -:  105:    //+2 Actions
        1:  106:    state->numActions = state->numActions + 2;
        -:  107:
        -:  108:    //discard played card from hand
        1:  109:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  110:    return 0;
        -:  111:}
        -:  112:
function compare called 600 returned 100% blocks executed 83%
      600:  113:int compare(const void* a, const void* b) {
      600:  114:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  115:    return 1;
      600:  116:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      160:  117:    return -1;
      440:  118:  return 0;
        -:  119:}
        -:  120:
function newGame called 0 returned 0% blocks executed 0%
    #####:  121:struct gameState* newGame() {
    #####:  122:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:  123:  return g;
        -:  124:}
        -:  125:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:  126:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  127:		  int k8, int k9, int k10) {
    #####:  128:  int* k = malloc(10 * sizeof(int));
    #####:  129:  k[0] = k1;
    #####:  130:  k[1] = k2;
    #####:  131:  k[2] = k3;
    #####:  132:  k[3] = k4;
    #####:  133:  k[4] = k5;
    #####:  134:  k[5] = k6;
    #####:  135:  k[6] = k7;
    #####:  136:  k[7] = k8;
    #####:  137:  k[8] = k9;
    #####:  138:  k[9] = k10;
    #####:  139:  return k;
        -:  140:}
        -:  141:
function initializeGame called 20 returned 100% blocks executed 83%
       20:  142:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  143:		   struct gameState *state) {
        -:  144:
        -:  145:  int i;
        -:  146:  int j;
        -:  147:  int it;			
        -:  148:  //set up random number generator
       20:  149:  SelectStream(1);
call    0 returned 100%
       20:  150:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:  151:  
        -:  152:  //check number of players
       20:  153:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  154:    {
    #####:  155:      return -1;
        -:  156:    }
        -:  157:
        -:  158:  //set number of players
       20:  159:  state->numPlayers = numPlayers;
        -:  160:
        -:  161:  //check selected kingdom cards are different
      220:  162:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  163:    {
     2200:  164:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  165:        {
     2000:  166:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  167:	    {
    #####:  168:	      return -1;
        -:  169:	    }
        -:  170:        }
        -:  171:    }
        -:  172:
        -:  173:
        -:  174:  //initialize supply
        -:  175:  ///////////////////////////////
        -:  176:
        -:  177:  //set number of Curse cards
       20:  178:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  179:    {
       20:  180:      state->supplyCount[curse] = 10;
        -:  181:    }
    #####:  182:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:  183:    {
    #####:  184:      state->supplyCount[curse] = 20;
        -:  185:    }
        -:  186:  else
        -:  187:    {
    #####:  188:      state->supplyCount[curse] = 30;
        -:  189:    }
        -:  190:
        -:  191:  //set number of Victory cards
       20:  192:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  193:    {
       20:  194:      state->supplyCount[estate] = 8;
       20:  195:      state->supplyCount[duchy] = 8;
       20:  196:      state->supplyCount[province] = 8;
        -:  197:    }
        -:  198:  else
        -:  199:    {
    #####:  200:      state->supplyCount[estate] = 12;
    #####:  201:      state->supplyCount[duchy] = 12;
    #####:  202:      state->supplyCount[province] = 12;
        -:  203:    }
        -:  204:
        -:  205:  //set number of Treasure cards
       20:  206:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       20:  207:  state->supplyCount[silver] = 40;
       20:  208:  state->supplyCount[gold] = 30;
        -:  209:
        -:  210:  //set number of Kingdom cards
      420:  211:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  212:    {
     3300:  213:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  214:	{
     3100:  215:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  216:	    {
        -:  217:	      //check if card is a 'Victory' Kingdom card
      200:  218:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  219:		{
    #####:  220:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  221:		    state->supplyCount[i] = 8; 
        -:  222:		  }
    #####:  223:		  else{ state->supplyCount[i] = 12; }
        -:  224:		}
        -:  225:	      else
        -:  226:		{
      200:  227:		  state->supplyCount[i] = 10;
        -:  228:		}
      200:  229:	      break;
        -:  230:	    }
        -:  231:	  else    //card is not in the set choosen for the game
        -:  232:	    {
     2900:  233:	      state->supplyCount[i] = -1;
        -:  234:	    }
        -:  235:	}
        -:  236:
        -:  237:    }
        -:  238:
        -:  239:  ////////////////////////
        -:  240:  //supply intilization complete
        -:  241:
        -:  242:  //set player decks
       60:  243:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  244:    {
       40:  245:      state->deckCount[i] = 0;
      160:  246:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  247:	{
      120:  248:	  state->deck[i][j] = estate;
      120:  249:	  state->deckCount[i]++;
        -:  250:	}
      320:  251:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  252:	{
      280:  253:	  state->deck[i][j] = copper;
      280:  254:	  state->deckCount[i]++;		
        -:  255:	}
        -:  256:    }
        -:  257:
        -:  258:  //shuffle player decks
       60:  259:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  260:    {
       40:  261:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  262:	{
    #####:  263:	  return -1;
        -:  264:	}
        -:  265:    }
        -:  266:
        -:  267:  //draw player hands
       60:  268:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  269:    {  
        -:  270:      //initialize hand size to zero
       40:  271:      state->handCount[i] = 0;
       40:  272:      state->discardCount[i] = 0;
        -:  273:      //draw 5 cards
        -:  274:      // for (j = 0; j < 5; j++)
        -:  275:      //	{
        -:  276:      //	  drawCard(i, state);
        -:  277:      //	}
        -:  278:    }
        -:  279:  
        -:  280:  //set embargo tokens to 0 for all supply piles
      560:  281:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  282:    {
      540:  283:      state->embargoTokens[i] = 0;
        -:  284:    }
        -:  285:
        -:  286:  //initialize first player's turn
       20:  287:  state->outpostPlayed = 0;
       20:  288:  state->phase = 0;
       20:  289:  state->numActions = 1;
       20:  290:  state->numBuys = 1;
       20:  291:  state->playedCardCount = 0;
       20:  292:  state->whoseTurn = 0;
       20:  293:  state->handCount[state->whoseTurn] = 0;
        -:  294:  //int it; move to top
        -:  295:
        -:  296:  //Moved draw cards to here, only drawing at the start of a turn
      120:  297:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      100:  298:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  299:  }
        -:  300:
       20:  301:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  302:
       20:  303:  return 0;
        -:  304:}
        -:  305:
function shuffle called 40 returned 100% blocks executed 94%
       40:  306:int shuffle(int player, struct gameState *state) {
        -:  307: 
        -:  308:
        -:  309:  int newDeck[MAX_DECK];
       40:  310:  int newDeckPos = 0;
        -:  311:  int card;
        -:  312:  int i;
        -:  313:
       40:  314:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  315:    return -1;
       40:  316:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  317:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  318:
      480:  319:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      400:  320:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      400:  321:    newDeck[newDeckPos] = state->deck[player][card];
      400:  322:    newDeckPos++;
     1400:  323:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
     1000:  324:      state->deck[player][i] = state->deck[player][i+1];
        -:  325:    }
      400:  326:    state->deckCount[player]--;
        -:  327:  }
      440:  328:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      400:  329:    state->deck[player][i] = newDeck[i];
      400:  330:    state->deckCount[player]++;
        -:  331:  }
        -:  332:
       40:  333:  return 0;
        -:  334:}
        -:  335:
function playCard called 0 returned 0% blocks executed 0%
    #####:  336:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  337:{	
        -:  338:  int card;
    #####:  339:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  340:
        -:  341:  //check if it is the right phase
    #####:  342:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  343:    {
    #####:  344:      return -1;
        -:  345:    }
        -:  346:	
        -:  347:  //check if player has enough actions
    #####:  348:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  349:    {
    #####:  350:      return -1;
        -:  351:    }
        -:  352:	
        -:  353:  //get card played
    #####:  354:  card = handCard(handPos, state);
call    0 never executed
        -:  355:	
        -:  356:  //check if selected card is an action
    #####:  357:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  358:    {
    #####:  359:      return -1;
        -:  360:    }
        -:  361:	
        -:  362:  //play card
    #####:  363:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  364:    {
    #####:  365:      return -1;
        -:  366:    }
        -:  367:	
        -:  368:  //reduce number of actions
    #####:  369:  state->numActions--;
        -:  370:
        -:  371:  //update coins (Treasure cards may be added with card draws)
    #####:  372:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  373:	
    #####:  374:  return 0;
        -:  375:}
        -:  376:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  377:int buyCard(int supplyPos, struct gameState *state) {
        -:  378:  int who;
        -:  379:  if (DEBUG){
        -:  380:    printf("Entering buyCard...\n");
        -:  381:  }
        -:  382:
        -:  383:  // I don't know what to do about the phase thing.
        -:  384:
    #####:  385:  who = state->whoseTurn;
        -:  386:
    #####:  387:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  388:    if (DEBUG)
        -:  389:      printf("You do not have any buys left\n");
    #####:  390:    return -1;
    #####:  391:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  392:    if (DEBUG)
        -:  393:      printf("There are not any of that type of card left\n");
    #####:  394:    return -1;
    #####:  395:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  396:    if (DEBUG) 
        -:  397:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  398:    return -1;
        -:  399:  } else {
    #####:  400:    state->phase=1;
        -:  401:    //state->supplyCount[supplyPos]--;
    #####:  402:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  403:  
    #####:  404:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  405:    state->numBuys--;
        -:  406:    if (DEBUG)
        -:  407:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  408:  }
        -:  409:
        -:  410:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  411:  //state->discardCount[who]++;
        -:  412:    
    #####:  413:  return 0;
        -:  414:}
        -:  415:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  416:int numHandCards(struct gameState *state) {
    #####:  417:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  418:}
        -:  419:
function handCard called 0 returned 0% blocks executed 0%
    #####:  420:int handCard(int handPos, struct gameState *state) {
    #####:  421:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  422:  return state->hand[currentPlayer][handPos];
        -:  423:}
        -:  424:
function supplyCount called 9 returned 100% blocks executed 100%
        9:  425:int supplyCount(int card, struct gameState *state) {
        9:  426:  return state->supplyCount[card];
        -:  427:}
        -:  428:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  429:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  430:  int i;
    #####:  431:  int count = 0;
        -:  432:
    #####:  433:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  436:    }
        -:  437:
    #####:  438:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  439:    {
    #####:  440:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  441:    }
        -:  442:
    #####:  443:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  444:    {
    #####:  445:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  446:    }
        -:  447:
    #####:  448:  return count;
        -:  449:}
        -:  450:
function whoseTurn called 12 returned 100% blocks executed 100%
       12:  451:int whoseTurn(struct gameState *state) {
       12:  452:  return state->whoseTurn;
        -:  453:}
        -:  454:
function endTurn called 4 returned 100% blocks executed 100%
        4:  455:int endTurn(struct gameState *state) {
        -:  456:  int k;
        -:  457:  int i;
        4:  458:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  459:  
        -:  460:  //Discard hand
       19:  461:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 79%
branch  1 taken 21% (fallthrough)
       15:  462:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       15:  463:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  464:  }
        4:  465:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  466:    
        -:  467:  //Code for determining the player
        4:  468:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        3:  469:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  470:  }
        -:  471:  else{
        1:  472:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  473:  }
        -:  474:
        4:  475:  state->outpostPlayed = 0;
        4:  476:  state->phase = 0;
        4:  477:  state->numActions = 1;
        4:  478:  state->coins = 0;
        4:  479:  state->numBuys = 1;
        4:  480:  state->playedCardCount = 0;
        4:  481:  state->handCount[state->whoseTurn] = 0;
        -:  482:
        -:  483:  //int k; move to top
        -:  484:  //Next player draws hand
       24:  485:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       20:  486:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  487:  }
        -:  488:
        -:  489:  //Update money
        4:  490:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  491:
        4:  492:  return 0;
        -:  493:}
        -:  494:
function isGameOver called 6 returned 100% blocks executed 100%
        6:  495:int isGameOver(struct gameState *state) {
        -:  496:  int i;
        -:  497:  int j;
        -:  498:	
        -:  499:  //if stack of Province cards is empty, the game ends
        6:  500:  if (state->supplyCount[province] == 0)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -:  501:    {
        1:  502:      return 1;
        -:  503:    }
        -:  504:
        -:  505:  //if three supply pile are at 0, the game ends
        5:  506:  j = 0;
      130:  507:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  508:    {
      125:  509:      if (state->supplyCount[i] == 0)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  510:	{
        9:  511:	  j++;
        -:  512:	}
        -:  513:    }
        5:  514:  if ( j >= 3)
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        -:  515:    {
        2:  516:      return 1;
        -:  517:    }
        -:  518:
        3:  519:  return 0;
        -:  520:}
        -:  521:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  522:int scoreFor (int player, struct gameState *state) {
        -:  523:
        -:  524:  int i;
    #####:  525:  int score = 0;
        -:  526:  //score from hand
    #####:  527:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  528:    {
    #####:  529:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  530:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  531:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  532:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  533:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  534:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  535:    }
        -:  536:
        -:  537:  //score from discard
    #####:  538:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  539:    {
    #####:  540:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  541:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  542:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  543:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  544:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  545:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  546:    }
        -:  547:
        -:  548:  //score from deck
    #####:  549:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  550:    {
    #####:  551:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  552:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  553:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  554:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  555:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  556:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  557:    }
        -:  558:
    #####:  559:  return score;
        -:  560:}
        -:  561:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  562:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  563:  int i;	
        -:  564:  int j;
        -:  565:  int highScore;
        -:  566:  int currentPlayer;
        -:  567:
        -:  568:  //get score for each player
    #####:  569:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  570:    {
        -:  571:      //set unused player scores to -9999
    #####:  572:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  573:	{
    #####:  574:	  players[i] = -9999;
        -:  575:	}
        -:  576:      else
        -:  577:	{
    #####:  578:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  579:	}
        -:  580:    }
        -:  581:
        -:  582:  //find highest score
    #####:  583:  j = 0;
    #####:  584:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  585:    {
    #####:  586:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  587:	{
    #####:  588:	  j = i;
        -:  589:	}
        -:  590:    }
    #####:  591:  highScore = players[j];
        -:  592:
        -:  593:  //add 1 to players who had less turns
    #####:  594:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  595:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  596:    {
    #####:  597:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  598:	{
    #####:  599:	  players[i]++;
        -:  600:	}
        -:  601:    }
        -:  602:
        -:  603:  //find new highest score
    #####:  604:  j = 0;
    #####:  605:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  606:    {
    #####:  607:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  608:	{
    #####:  609:	  j = i;
        -:  610:	}
        -:  611:    }
    #####:  612:  highScore = players[j];
        -:  613:
        -:  614:  //set winners in array to 1 and rest to 0
    #####:  615:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  616:    {
    #####:  617:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  618:	{
    #####:  619:	  players[i] = 1;
        -:  620:	}
        -:  621:      else
        -:  622:	{
    #####:  623:	  players[i] = 0;
        -:  624:	}
        -:  625:    }
        -:  626:
    #####:  627:  return 0;
        -:  628:}
        -:  629:
function drawCard called 138 returned 100% blocks executed 38%
      138:  630:int drawCard(int player, struct gameState *state)
        -:  631:{	int count;
        -:  632:  int deckCounter;
      138:  633:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  634:    
        -:  635:    //Step 1 Shuffle the discard pile back into a deck
        -:  636:    int i;
        -:  637:    //Move discard to deck
    #####:  638:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  639:      state->deck[player][i] = state->discard[player][i];
    #####:  640:      state->discard[player][i] = -1;
        -:  641:    }
        -:  642:
    #####:  643:    state->deckCount[player] = state->discardCount[player];
    #####:  644:    state->discardCount[player] = 0;//Reset discard
        -:  645:
        -:  646:    //Shufffle the deck
    #####:  647:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  648:   
        -:  649:    if (DEBUG){//Debug statements
        -:  650:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  651:    }
        -:  652:    
    #####:  653:    state->discardCount[player] = 0;
        -:  654:
        -:  655:    //Step 2 Draw Card
    #####:  656:    count = state->handCount[player];//Get current player's hand count
        -:  657:    
        -:  658:    if (DEBUG){//Debug statements
        -:  659:      printf("Current hand count: %d\n", count);
        -:  660:    }
        -:  661:    
    #####:  662:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  663:
    #####:  664:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  665:      return -1;
        -:  666:
    #####:  667:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  668:    state->deckCount[player]--;
    #####:  669:    state->handCount[player]++;//Increment hand count
        -:  670:  }
        -:  671:
        -:  672:  else{
      138:  673:    int count = state->handCount[player];//Get current hand count for player
        -:  674:    int deckCounter;
        -:  675:    if (DEBUG){//Debug statements
        -:  676:      printf("Current hand count: %d\n", count);
        -:  677:    }
        -:  678:
      138:  679:    deckCounter = state->deckCount[player];//Create holder for the deck count
      138:  680:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      138:  681:    state->deckCount[player]--;
      138:  682:    state->handCount[player]++;//Increment hand count
        -:  683:  }
        -:  684:
      138:  685:  return 0;
        -:  686:}
        -:  687:
function getCost called 0 returned 0% blocks executed 0%
    #####:  688:int getCost(int cardNumber)
        -:  689:{
    #####:  690:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  691:    {
        -:  692:    case curse:
    #####:  693:      return 0;
        -:  694:    case estate:
    #####:  695:      return 2;
        -:  696:    case duchy:
    #####:  697:      return 5;
        -:  698:    case province:
    #####:  699:      return 8;
        -:  700:    case copper:
    #####:  701:      return 0;
        -:  702:    case silver:
    #####:  703:      return 3;
        -:  704:    case gold:
    #####:  705:      return 6;
        -:  706:    case adventurer:
    #####:  707:      return 6;
        -:  708:    case council_room:
    #####:  709:      return 5;
        -:  710:    case feast:
    #####:  711:      return 4;
        -:  712:    case gardens:
    #####:  713:      return 4;
        -:  714:    case mine:
    #####:  715:      return 5;
        -:  716:    case remodel:
    #####:  717:      return 4;
        -:  718:    case smithy:
    #####:  719:      return 4;
        -:  720:    case village:
    #####:  721:      return 3;
        -:  722:    case baron:
    #####:  723:      return 4;
        -:  724:    case great_hall:
    #####:  725:      return 3;
        -:  726:    case minion:
    #####:  727:      return 5;
        -:  728:    case steward:
    #####:  729:      return 3;
        -:  730:    case tribute:
    #####:  731:      return 5;
        -:  732:    case ambassador:
    #####:  733:      return 3;
        -:  734:    case cutpurse:
    #####:  735:      return 4;
        -:  736:    case embargo: 
    #####:  737:      return 2;
        -:  738:    case outpost:
    #####:  739:      return 5;
        -:  740:    case salvager:
    #####:  741:      return 4;
        -:  742:    case sea_hag:
    #####:  743:      return 4;
        -:  744:    case treasure_map:
    #####:  745:      return 4;
        -:  746:    }
        -:  747:	
    #####:  748:  return -1;
        -:  749:}
        -:  750:
function cardEffect called 5 returned 100% blocks executed 4%
        5:  751:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  752:{
        -:  753:  int i;
        -:  754:  int j;
        -:  755:  int k;
        -:  756:  int x;
        -:  757:  int index;
        5:  758:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        5:  759:  int nextPlayer = currentPlayer + 1;
        -:  760:
        5:  761:  int tributeRevealedCards[2] = {-1, -1};
        -:  762:  int temphand[MAX_HAND];// moved above the if statement
        5:  763:  int drawntreasure=0;
        -:  764:  int cardDrawn;
        5:  765:  int z = 0;// this is the counter for the temp hand
        5:  766:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  767:    nextPlayer = 0;
        -:  768:  }
        -:  769:  
        -:  770:	
        -:  771:  //uses switch to select card and perform actions
        5:  772:  switch( card ) 
branch  0 taken 40%
branch  1 taken 20%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 20%
branch  7 taken 20%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  773:    {
        -:  774:    case adventurer:
        -:  775:      /*
        -:  776:      while(drawntreasure<2){
        -:  777:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  778:	  shuffle(currentPlayer, state);
        -:  779:	}
        -:  780:	drawCard(currentPlayer, state);
        -:  781:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  782:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  783:	  drawntreasure++;
        -:  784:	else{
        -:  785:	  temphand[z]=cardDrawn;
        -:  786:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  787:	  z++;
        -:  788:	}
        -:  789:      }
        -:  790:      while(z-1>=0){
        -:  791:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  792:	z=z-1;
        -:  793:      }
        -:  794:      return 0;
        -:  795:      */
        2:  796:      return adventurerPlayed(state, handPos, currentPlayer, drawntreasure);
call    0 returned 100%
        -:  797:    case council_room:
        -:  798:      /*
        -:  799:      //+4 Cards
        -:  800:      for (i = 0; i < 4; i++)
        -:  801:	{
        -:  802:	  drawCard(currentPlayer, state);
        -:  803:	}
        -:  804:			
        -:  805:      //+1 Buy
        -:  806:      state->numBuys++;
        -:  807:			
        -:  808:      //Each other player draws a card
        -:  809:      for (i = 0; i < state->numPlayers; i++)
        -:  810:	{
        -:  811:	  if ( i != currentPlayer )
        -:  812:	    {
        -:  813:	      drawCard(i, state);
        -:  814:	    }
        -:  815:	}
        -:  816:			
        -:  817:      //put played card in played card pile
        -:  818:      discardCard(handPos, currentPlayer, state, 0);
        -:  819:			
        -:  820:      return 0;
        -:  821:	*/
        1:  822:      return councilPlayed(state, handPos, currentPlayer);		
call    0 returned 100%
        -:  823:    case feast:
        -:  824:      //gain card with cost up to 5
        -:  825:      //Backup hand
    #####:  826:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  827:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  828:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  829:      }
        -:  830:      //Backup hand
        -:  831:
        -:  832:      //Update Coins for Buy
    #####:  833:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  834:      x = 1;//Condition to loop on
    #####:  835:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  836:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  837:	  if (DEBUG)
        -:  838:	    printf("None of that card left, sorry!\n");
        -:  839:
        -:  840:	  if (DEBUG){
        -:  841:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  842:	  }
        -:  843:	}
    #####:  844:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  845:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  846:
        -:  847:	  if (DEBUG){
        -:  848:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  849:	  }
        -:  850:	}
        -:  851:	else{
        -:  852:
        -:  853:	  if (DEBUG){
        -:  854:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  855:	  }
        -:  856:
    #####:  857:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  858:	  x = 0;//No more buying cards
        -:  859:
        -:  860:	  if (DEBUG){
        -:  861:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  862:	  }
        -:  863:
        -:  864:	}
        -:  865:      }     
        -:  866:
        -:  867:      //Reset Hand
    #####:  868:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  869:	state->hand[currentPlayer][i] = temphand[i];
    #####:  870:	temphand[i] = -1;
        -:  871:      }
        -:  872:      //Reset Hand
        -:  873:      			
    #####:  874:      return 0;
        -:  875:			
        -:  876:    case gardens:
    #####:  877:      return -1;
        -:  878:			
        -:  879:    case mine:
    #####:  880:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  881:
    #####:  882:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  883:	{
    #####:  884:	  return -1;
        -:  885:	}
        -:  886:		
    #####:  887:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  888:	{
    #####:  889:	  return -1;
        -:  890:	}
        -:  891:
    #####:  892:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  893:	{
    #####:  894:	  return -1;
        -:  895:	}
        -:  896:
    #####:  897:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  898:
        -:  899:      //discard card from hand
    #####:  900:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  901:
        -:  902:      //discard trashed card
    #####:  903:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  904:	{
    #####:  905:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  906:	    {
    #####:  907:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  908:	      break;
        -:  909:	    }
        -:  910:	}
        -:  911:			
    #####:  912:      return 0;
        -:  913:			
        -:  914:    case remodel:
        -:  915:      /*
        -:  916:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  917:
        -:  918:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  919:	{
        -:  920:	  return -1;
        -:  921:	}
        -:  922:
        -:  923:      gainCard(choice2, state, 0, currentPlayer);
        -:  924:
        -:  925:      //discard card from hand
        -:  926:      discardCard(handPos, currentPlayer, state, 0);
        -:  927:
        -:  928:      //discard trashed card
        -:  929:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  930:	{
        -:  931:	  if (state->hand[currentPlayer][i] == j)
        -:  932:	    {
        -:  933:	      discardCard(i, currentPlayer, state, 0);			
        -:  934:	      break;
        -:  935:	    }
        -:  936:	}
        -:  937:
        -:  938:
        -:  939:      return 0;
        -:  940:	*/
    #####:  941:      return remodelPlayed(state, currentPlayer, handPos, choice1, choice2);	
call    0 never executed
        -:  942:    case smithy:
        -:  943:      /*
        -:  944:      //+3 Cards
        -:  945:      for (i = 0; i < 3; i++)
        -:  946:	{
        -:  947:	  drawCard(currentPlayer, state);
        -:  948:	}
        -:  949:			
        -:  950:      //discard card from hand
        -:  951:      discardCard(handPos, currentPlayer, state, 0);
        -:  952:      return 0;
        -:  953:	*/
        1:  954:      return smithyPlayed(state, currentPlayer, handPos);	
call    0 returned 100%
        -:  955:    case village:
        -:  956:      /*
        -:  957:      //+1 Card
        -:  958:      drawCard(currentPlayer, state);
        -:  959:			
        -:  960:      //+2 Actions
        -:  961:      state->numActions = state->numActions + 2;
        -:  962:			
        -:  963:      //discard played card from hand
        -:  964:      discardCard(handPos, currentPlayer, state, 0);
        -:  965:      return 0;
        -:  966:	*/
        1:  967:      return villagePlayed(state, currentPlayer, handPos);
call    0 returned 100%
        -:  968:    case baron:
    #####:  969:      state->numBuys++;//Increase buys by 1!
    #####:  970:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  971:	int p = 0;//Iterator for hand!
    #####:  972:	int card_not_discarded = 1;//Flag for discard set!
    #####:  973:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  974:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  975:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  976:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  977:	    state->discardCount[currentPlayer]++;
    #####:  978:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  979:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  980:	    }
    #####:  981:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  982:	    state->handCount[currentPlayer]--;
    #####:  983:	    card_not_discarded = 0;//Exit the loop
        -:  984:	  }
    #####:  985:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  986:	    if(DEBUG) {
        -:  987:	      printf("No estate cards in your hand, invalid choice\n");
        -:  988:	      printf("Must gain an estate if there are any\n");
        -:  989:	    }
    #####:  990:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  991:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  992:	      state->supplyCount[estate]--;//Decrement estates
    #####:  993:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  994:		isGameOver(state);
call    0 never executed
        -:  995:	      }
        -:  996:	    }
    #####:  997:	    card_not_discarded = 0;//Exit the loop
        -:  998:	  }
        -:  999:			    
        -: 1000:	  else{
    #####: 1001:	    p++;//Next card
        -: 1002:	  }
        -: 1003:	}
        -: 1004:      }
        -: 1005:			    
        -: 1006:      else{
    #####: 1007:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1008:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1009:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1010:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1011:	    isGameOver(state);
call    0 never executed
        -: 1012:	  }
        -: 1013:	}
        -: 1014:      }
        -: 1015:	    
        -: 1016:      
    #####: 1017:      return 0;
        -: 1018:		
        -: 1019:    case great_hall:
        -: 1020:      //+1 Card
    #####: 1021:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1022:			
        -: 1023:      //+1 Actions
    #####: 1024:      state->numActions++;
        -: 1025:			
        -: 1026:      //discard card from hand
    #####: 1027:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1028:      return 0;
        -: 1029:		
        -: 1030:    case minion:
        -: 1031:      //+1 action
    #####: 1032:      state->numActions++;
        -: 1033:			
        -: 1034:      //discard card from hand
    #####: 1035:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1036:			
    #####: 1037:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1038:	{
    #####: 1039:	  state->coins = state->coins + 2;
        -: 1040:	}
        -: 1041:			
    #####: 1042:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1043:	{
        -: 1044:	  //discard hand
    #####: 1045:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1046:	    {
    #####: 1047:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1048:	    }
        -: 1049:				
        -: 1050:	  //draw 4
    #####: 1051:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1052:	    {
    #####: 1053:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1054:	    }
        -: 1055:				
        -: 1056:	  //other players discard hand and redraw if hand size > 4
    #####: 1057:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1058:	    {
    #####: 1059:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1060:		{
    #####: 1061:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1062:		    {
        -: 1063:		      //discard hand
    #####: 1064:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1065:			{
    #####: 1066:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1067:			}
        -: 1068:							
        -: 1069:		      //draw 4
    #####: 1070:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1071:			{
    #####: 1072:			  drawCard(i, state);
call    0 never executed
        -: 1073:			}
        -: 1074:		    }
        -: 1075:		}
        -: 1076:	    }
        -: 1077:				
        -: 1078:	}
    #####: 1079:      return 0;
        -: 1080:		
        -: 1081:    case steward:
    #####: 1082:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1083:	{
        -: 1084:	  //+2 cards
    #####: 1085:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1086:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1087:	}
    #####: 1088:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1089:	{
        -: 1090:	  //+2 coins
    #####: 1091:	  state->coins = state->coins + 2;
        -: 1092:	}
        -: 1093:      else
        -: 1094:	{
        -: 1095:	  //trash 2 cards in hand
    #####: 1096:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1097:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1098:	}
        -: 1099:			
        -: 1100:      //discard card from hand
    #####: 1101:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1102:      return 0;
        -: 1103:		
        -: 1104:    case tribute:
    #####: 1105:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1106:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1107:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1108:	  state->deckCount[nextPlayer]--;
        -: 1109:	}
    #####: 1110:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1111:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1112:	  state->discardCount[nextPlayer]--;
        -: 1113:	}
        -: 1114:	else{
        -: 1115:	  //No Card to Reveal
        -: 1116:	  if (DEBUG){
        -: 1117:	    printf("No cards to reveal\n");
        -: 1118:	  }
        -: 1119:	}
        -: 1120:      }
        -: 1121:	    
        -: 1122:      else{
    #####: 1123:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1124:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1125:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1126:	    state->deckCount[nextPlayer]++;
    #####: 1127:	    state->discard[nextPlayer][i] = -1;
    #####: 1128:	    state->discardCount[nextPlayer]--;
        -: 1129:	  }
        -: 1130:			    
    #####: 1131:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1132:	} 
    #####: 1133:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1134:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1135:	state->deckCount[nextPlayer]--;
    #####: 1136:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1137:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1138:	state->deckCount[nextPlayer]--;
        -: 1139:      }    
        -: 1140:		       
    #####: 1141:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1142:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1143:	state->playedCardCount++;
    #####: 1144:	tributeRevealedCards[1] = -1;
        -: 1145:      }
        -: 1146:
    #####: 1147:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1148:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1149:	  state->coins += 2;
        -: 1150:	}
        -: 1151:		    
    #####: 1152:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1153:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1154:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1155:	}
        -: 1156:	else{//Action Card
    #####: 1157:	  state->numActions = state->numActions + 2;
        -: 1158:	}
        -: 1159:      }
        -: 1160:	    
    #####: 1161:      return 0;
        -: 1162:		
        -: 1163:    case ambassador:
    #####: 1164:      j = 0;		//used to check if player has enough cards to discard
        -: 1165:
    #####: 1166:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1167:	{
    #####: 1168:	  return -1;				
        -: 1169:	}
        -: 1170:
    #####: 1171:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1172:	{
    #####: 1173:	  return -1;
        -: 1174:	}
        -: 1175:
    #####: 1176:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1177:	{
    #####: 1178:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1179:	    {
    #####: 1180:	      j++;
        -: 1181:	    }
        -: 1182:	}
    #####: 1183:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1184:	{
    #####: 1185:	  return -1;				
        -: 1186:	}
        -: 1187:
        -: 1188:      if (DEBUG) 
        -: 1189:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1190:
        -: 1191:      //increase supply count for choosen card by amount being discarded
    #####: 1192:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1193:			
        -: 1194:      //each other player gains a copy of revealed card
    #####: 1195:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1196:	{
    #####: 1197:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1198:	    {
    #####: 1199:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1200:	    }
        -: 1201:	}
        -: 1202:
        -: 1203:      //discard played card from hand
    #####: 1204:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1205:
        -: 1206:      //trash copies of cards returned to supply
    #####: 1207:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1208:	{
    #####: 1209:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1210:	    {
    #####: 1211:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1212:		{
    #####: 1213:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1214:		  break;
        -: 1215:		}
        -: 1216:	    }
        -: 1217:	}			
        -: 1218:
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case cutpurse:
        -: 1222:
    #####: 1223:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1224:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1225:	{
    #####: 1226:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1227:	    {
    #####: 1228:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1229:		{
    #####: 1230:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1231:		    {
    #####: 1232:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1233:		      break;
        -: 1234:		    }
    #####: 1235:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1236:		    {
    #####: 1237:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1238:			{
        -: 1239:			  if (DEBUG)
        -: 1240:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1241:			}	
    #####: 1242:		      break;
        -: 1243:		    }		
        -: 1244:		}
        -: 1245:					
        -: 1246:	    }
        -: 1247:				
        -: 1248:	}				
        -: 1249:
        -: 1250:      //discard played card from hand
    #####: 1251:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1252:
    #####: 1253:      return 0;
        -: 1254:
        -: 1255:		
        -: 1256:    case embargo: 
        -: 1257:      //+2 Coins
    #####: 1258:      state->coins = state->coins + 2;
        -: 1259:			
        -: 1260:      //see if selected pile is in play
    #####: 1261:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1262:	{
    #####: 1263:	  return -1;
        -: 1264:	}
        -: 1265:			
        -: 1266:      //add embargo token to selected supply pile
    #####: 1267:      state->embargoTokens[choice1]++;
        -: 1268:			
        -: 1269:      //trash card
    #####: 1270:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1271:      return 0;
        -: 1272:		
        -: 1273:    case outpost:
        -: 1274:      //set outpost flag
    #####: 1275:      state->outpostPlayed++;
        -: 1276:			
        -: 1277:      //discard card
    #####: 1278:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1279:      return 0;
        -: 1280:		
        -: 1281:    case salvager:
        -: 1282:      //+1 buy
    #####: 1283:      state->numBuys++;
        -: 1284:			
    #####: 1285:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1286:	{
        -: 1287:	  //gain coins equal to trashed card
    #####: 1288:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1289:	  //trash card
    #####: 1290:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1291:	}
        -: 1292:			
        -: 1293:      //discard card
    #####: 1294:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1295:      return 0;
        -: 1296:		
        -: 1297:    case sea_hag:
    #####: 1298:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1299:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1300:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1301:	  state->discardCount[i]++;
    #####: 1302:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1303:	}
        -: 1304:      }
    #####: 1305:      return 0;
        -: 1306:		
        -: 1307:    case treasure_map:
        -: 1308:      //search hand for another treasure_map
    #####: 1309:      index = -1;
    #####: 1310:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1311:	{
    #####: 1312:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1313:	    {
    #####: 1314:	      index = i;
    #####: 1315:	      break;
        -: 1316:	    }
        -: 1317:	}
    #####: 1318:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1319:	{
        -: 1320:	  //trash both treasure cards
    #####: 1321:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1322:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1323:
        -: 1324:	  //gain 4 Gold cards
    #####: 1325:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1326:	    {
    #####: 1327:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1328:	    }
        -: 1329:				
        -: 1330:	  //return success
    #####: 1331:	  return 1;
        -: 1332:	}
        -: 1333:			
        -: 1334:      //no second treasure_map found in hand
    #####: 1335:      return -1;
        -: 1336:    }
        -: 1337:	
    #####: 1338:  return -1;
        -: 1339:}
        -: 1340:
function discardCard called 3 returned 100% blocks executed 78%
        3: 1341:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1342:{
        -: 1343:	
        -: 1344:  //if card is not trashed, added to Played pile 
        3: 1345:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1346:    {
        -: 1347:      //add card to played pile
        3: 1348:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1349:      state->playedCardCount++;
        -: 1350:    }
        -: 1351:	
        -: 1352:  //set played card to -1
        3: 1353:  state->hand[currentPlayer][handPos] = -1;
        -: 1354:	
        -: 1355:  //remove card from player's hand
        3: 1356:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1357:    {
        -: 1358:      //reduce number of cards in hand
    #####: 1359:      state->handCount[currentPlayer]--;
        -: 1360:    }
        3: 1361:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1362:    {
        -: 1363:      //reduce number of cards in hand
    #####: 1364:      state->handCount[currentPlayer]--;
        -: 1365:    }
        -: 1366:  else 	
        -: 1367:    {
        -: 1368:      //replace discarded card with last card in hand
        3: 1369:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1370:      //set last card to -1
        3: 1371:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1372:      //reduce number of cards in hand
        3: 1373:      state->handCount[currentPlayer]--;
        -: 1374:    }
        -: 1375:	
        3: 1376:  return 0;
        -: 1377:}
        -: 1378:
function gainCard called 9 returned 100% blocks executed 100%
        9: 1379:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1380:{
        -: 1381:  //Note: supplyPos is enum of choosen card
        -: 1382:	
        -: 1383:  //check if supply pile is empty (0) or card is not used in game (-1)
        9: 1384:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 67% (fallthrough)
branch  2 taken 33%
        -: 1385:    {
        6: 1386:      return -1;
        -: 1387:    }
        -: 1388:	
        -: 1389:  //added card for [whoseTurn] current player:
        -: 1390:  // toFlag = 0 : add to discard
        -: 1391:  // toFlag = 1 : add to deck
        -: 1392:  // toFlag = 2 : add to hand
        -: 1393:
        3: 1394:  if (toFlag == 1)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1395:    {
        1: 1396:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1397:      state->deckCount[player]++;
        -: 1398:    }
        2: 1399:  else if (toFlag == 2)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1400:    {
        1: 1401:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1402:      state->handCount[player]++;
        -: 1403:    }
        -: 1404:  else
        -: 1405:    {
        1: 1406:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1407:      state->discardCount[player]++;
        -: 1408:    }
        -: 1409:	
        -: 1410:  //decrease number in supply pile
        3: 1411:  state->supplyCount[supplyPos]--;
        -: 1412:	 
        3: 1413:  return 0;
        -: 1414:}
        -: 1415:
function updateCoins called 24 returned 100% blocks executed 82%
       24: 1416:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1417:{
        -: 1418:  int i;
        -: 1419:	
        -: 1420:  //reset coin count
       24: 1421:  state->coins = 0;
        -: 1422:
        -: 1423:  //add coins for each Treasure card in player's hand
      144: 1424:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1425:    {
      120: 1426:      if (state->hand[player][i] == copper)
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
        -: 1427:	{
       94: 1428:	  state->coins += 1;
        -: 1429:	}
       26: 1430:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1431:	{
    #####: 1432:	  state->coins += 2;
        -: 1433:	}
       26: 1434:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1435:	{
    #####: 1436:	  state->coins += 3;
        -: 1437:	}	
        -: 1438:    }	
        -: 1439:
        -: 1440:  //add bonus
       24: 1441:  state->coins += bonus;
        -: 1442:
       24: 1443:  return 0;
        -: 1444:}
        -: 1445:
        -: 1446:
        -: 1447://end of dominion.c
        -: 1448:
